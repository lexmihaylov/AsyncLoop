(function(root,factory){if(typeof define==="function"&&define.amd){define(factory)}else{root.AsyncUtils=factory()}})(this,function(){if(!Function.prototype.bind){Function.prototype.bind=function(oThis){if(typeof this!=="function"){throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable")}var aArgs=Array.prototype.slice.call(arguments,1),fToBind=this,fNOP=function(){},fBound=function(){return fToBind.apply(this instanceof fNOP?this:oThis,aArgs.concat(Array.prototype.slice.call(arguments)))};if(this.prototype){fNOP.prototype=this.prototype}fBound.prototype=new fNOP;return fBound}}var Loop=function(){var Loop=function(handle,iterations){this.maxIterations=iterations||null;this.handle=handle;this.deferred={};this.job=null;this.promise=new Promise(function(resolve,reject){this.deferred.resolve=resolve;this.deferred.reject=reject}.bind(this))};Loop.prototype.start=function(){var iteration=1;this.job=setTimeout(function wait(){if(this.handle.call(this)){this.done();return}if(!!this.maxIterations&&iteration===this.maxIterations){this.kill("maximum iterations reached.");return}iteration++;this.job=setTimeout(wait.bind(this))}.bind(this));return this.promise};Loop.prototype.done=function(){if(this.job){clearTimeout(this.job);this.job=null}this.deferred.resolve()};Loop.prototype.terminate=function(type,message){if(this.job){clearTimeout(this.job);this.job=null}type=type||"Terminate";message=message||"Unknown reason";this.deferred.reject("["+type+"] "+message)};Loop.prototype.cancel=function(message){this.terminate("Cancel",message)};Loop.prototype.kill=function(message){this.terminate("Kill",message)};Loop.until=function(handle,iterations){var instance=new this(handle,iterations);instance.start();return instance.promise};(function(){var loopMap={};Loop.unique=function(id){var self=this;return{until:function(handle,iterations){if(id in loopMap){loopMap[id].cancel("Overriting unique task `"+id+"` with a newer one.")}var instance=new self(handle,iterations);instance.start();loopMap[id]=instance;return instance.promise}}}})();return Loop}();var Thread=function(){var Template=function(){self.onmessage=function(e){var msg=e.data;var params=[];if(msg.type==="exec"){try{var result=THREAD_HANDLE.apply(self,msg.data);self.postMessage({type:"result",data:result})}catch(ex){self.postMessage({type:"error",data:ex})}}}};var Thread=function(handle){this.handle="("+Template.toString().replace("THREAD_HANDLE",handle.toString())+")();";this.url=null;this.worker=null;this.promise=null;this.deferred=null};Thread.prototype.exec=function(params){params=params||[];this.promise=new Promise(function(resolve,reject){this.deferred={resolve:resolve,reject:reject}}.bind(this));this.worker.postMessage({type:"exec",data:this.params});this.worker.onmessage=function(e){var msg=e.data;switch(msg.type){case"result":this.deferred.resolve(msg.data);break;case"error":this.deferred.reject(msg.data);break}}.bind(this);return this.promise};Thread.prototype.start=function(){if(this.worker!==null){this.terminate()}this.url=window.URL.createObjectURL(new Blob([this.handle.toString()]));this.worker=new Worker(this.url);return this};Thread.prototype.terminate=function(){this.worker.terminate();window.URL.revokeObjectURL(this.url);this.worker=null;this.url=null;this.deferred.reject("Terminated");return this};return Thread}();var List=function(){var List=function(){var self=function(list){this.list=list};self.prototype.filter=function(condition){var promise=new Promise(function(resolve,reject){var newIndex=0;var newList=[];this.each(function(item,index){if(condition(item,index)){newList[newIndex]=item;newIndex++}}).then(function(){resolve(newList)})}.bind(this));return promise};self.prototype.each=function(handle){var index=0;var _this=this;return Loop.until(function(){handle.call(this,_this.list[index],index);index++;return index>_this.list.length-1})};self.prototype.map=function(handle){var promise=new Promise(function(resolve,reject){var newIndex=0;var newList=[];this.each(function(item,index){newList[newIndex]=handle(item,index);newIndex++}).then(function(){resolve(newList)})}.bind(this));return promise};self.prototype.find=function(condition){var resolved=false;var promise=new Promise(function(resolve,reject){this.each(function(item,index){if(condition(item,index)){resolved=true;resolve({item:item,index:index});this.done()}}).then(function(){if(!resolved){reject(null)}})}.bind(this));return promise};return self}();return function(list){return new List(list)}}();var If=function(){var ForkPromiseProxy=function(){var self=function(promise){this.promise=promise;this.thenHandle=function(){};this.elseHandle=function(){};this.next=this.promise.then(function(result){var returns=null;if(result===true){returns=this.resolve("then")}else if(result===false){returns=this.resolve("else")}if(returns instanceof self){returns=returns.promise}return returns}.bind(this))};self.prototype.resolve=function(type){return this[type+"Handle"]()};self.prototype.then=function(handle){this.thenHandle=handle;return this};self.prototype.else=function(handle){this.elseHandle=handle;return new self(this.next)};return self}();var If=function(condition){var promise=new ForkPromiseProxy(new Promise(function(resolve,reject){setTimeout(function(){resolve(condition())})}));return promise};return If}();return{Loop:Loop,Thread:Thread,List:List,if:If}});